# Remap the prefix from Ctrl+b to Crtl+s
unbind C-b
set -g prefix C-s

# Allow normal use of the prefix key combination if we double press it twice
# bind-key -r C-s send-prefix 
# NOTE: I haven't gotten this to work

# Reload the config file in tmux
bind-key r source-file ~/.tmux.conf\; display-message "~/.tmux.conf reloaded"

# Run commands in tmux
#<prefix> :

# Switch between panes
#<prefix> o

# Open already existing session
#tmux new-session -A -s <session-name>

# Navigation between panes
bind-key -n C-h select-pane -L
bind-key -n C-j select-pane -D
bind-key -n C-k select-pane -U
bind-key -n C-l select-pane -R

# Set the screen color
set-option -g default-terminal "screen-256color"

# Set linewise editing from shell in the status bar for commands
# C-a - beginning of command
# C-e - end of command
# C-p - go back through the command history
# C-n - go forward through the command history
set-option -g status-keys "emacs"

# Make status bar less pronounced
set-option -g status-bg '#666666'
set-option -g status-fg '#aaaaaa'

# Show the full name of the session on the left side of the status bar
set-option -g status-left-length 60

# Show the Panes and Date on the right of the status bar
set-option -g status-right " #(date) [ PANE #P ] " 

# Splitting panes
bind-key - split-window -v -c "#{pane_current_path}"
# ------------------------------------------------------------
# NOTE: Tmux Version ^3.0
# For version ^3.0 tmux's configuration parsing has changed
# to use yacc(1). There is one incompatible change:
# a \ on its own must be escaped or quoted as either \\ or '\'
# (the latter works on older tmux versions).
# Version-specific commands [grumble, grumble]
# See: https://github.com/tmux/tmux/blob/master/CHANGES

# We need to use either `\\` because if-shell introduces
# an additional parsing step so simply `\` won't work.
run-shell 'tmux setenv -g TMUX_VERSION $(tmux -V | \
                            sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$TMUX_VERSION < 3.0" | bc)" = 1 ]' \
    "bind-key \\ split-window -h -c '#{pane_current_path}'"
# We need to use either `\\\\` or `'\\'`because if-shell introduces
# an additional parsing step so simply `\\` or `'\'`won't work.
if-shell -b '[ "$(echo "$TMUX_VERSION >= 3.0" | bc)" = 1 ]' \
    "bind-key \\\\ split-window -h -c '#{pane_current_path}'"
# ------------------------------------------------------------

# Fine adjust pane size using Shift + <Arrow Key>
bind -n S-Left resize-pane -L 2
bind -n S-Right resize-pane -R 2
bind -n S-Down resize-pane -D 1
bind -n S-Up resize-pane -U 1

# Coarse adjust pane size using Shift + <Arrow Key>
bind -n C-Left resize-pane -L 10
bind -n C-Right resize-pane -R 10
bind -n C-Down resize-pane -D 5
bind -n C-Up resize-pane -U 5

# Zooming and Unzooming a pane to fit the entire window
# <prefix> z

# Creating a Window
bind c new-window -c "#{pane_current_path}"


# Navigating Between Windows
# <prefix> <window number>
set -g base-index 1         # Start window numbering at 1
set -g renumber-windows on  # Renumber windows as they are created/destroyed

# Destorying a Window
# <prefix> d

# Switching to the Previous window
# <prefix> l

# Move current pane to an new window
bind-key b break-pane
# bind-key b break-pane -d   # -d to keep focus on the current window

# Detach from session
# <prefix> d

# List Sessions
# tmux ls

# Creating a session
# tat - creates a session based on the current directory
# tat <name> - creates a session with the given name
# NOTE: The tat function is added to your .bashrc by the config script.


# Switching between sessions interactively
bind-key C-j choose-tree

# Switcing to Previous Session
# <prefix> L

# -----------------------------------------------------
# Vim like scroll in tmux
# -----------------------------------------------------
# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
# bind-key -t vi-copy v begin-selection
# bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
# unbind -t vi-copy Enter
# bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
# NOTE: Couldn't get the above to work on Ubuntu

# Enter copy mode
# <prefix> [

# Once in copy mode you can do a reverse search like in vim using `?`
# -----------------------------------------------------

